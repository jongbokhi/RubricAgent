# Use uv image for first stage
FROM ghcr.io/astral-sh/uv:0.8.15 AS uv

# First stage: Build dependencies
FROM public.ecr.aws/lambda/python:3.12 AS builder

# Enable bytecode compilation to improve cold-start performance
ENV UV_COMPILE_BYTECODE=1

# Disable installer metadata to create a deterministic layer
ENV UV_NO_INSTALLER_METADATA=1

# Enable copy mode to support bind mount caching
ENV UV_LINK_MODE=copy

# Bundle the dependencies into the Lambda task root via `uv pip install --target`
# Omit any local packages (`--no-emit-workspace`) and development dependencies (`--no-dev`)
# This ensures that the Docker layer cache is only invalidated when the `pyproject.toml` or `uv.lock`
# files change, but remains robust to changes in the application code
RUN --mount=from=uv,source=/uv,target=/bin/uv \
    --mount=type=cache,target=/root/.cache/uv \
    --mount=type=bind,source=uv.lock,target=uv.lock \
    --mount=type=bind,source=pyproject.toml,target=pyproject.toml \
    uv export --frozen --no-emit-workspace --no-dev --no-editable -o requirements.txt && \
    uv pip install -r requirements.txt --target "${LAMBDA_TASK_ROOT}"

# Second stage: Final runtime image
FROM public.ecr.aws/lambda/python:3.12

# Copy the runtime dependencies from the builder stage
COPY --from=builder ${LAMBDA_TASK_ROOT} ${LAMBDA_TASK_ROOT}

# Copy the application code (src -> src in the container)
COPY ./backend/src ${LAMBDA_TASK_ROOT}/src

# Set the AWS Lambda handler (pointing to our FastAPI app wrapped with Mangum)
CMD ["src.main.handler"]